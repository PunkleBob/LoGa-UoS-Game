
/*This script has been, partially or completely, generated by the GenerateVariableWindow*/
using UnityEngine;

namespace LoGaCulture.LUTE
{
    /// <summary>
    /// UDate variable type.
    /// </summary>
    [VariableInfo("Date Time", "UDate")]
    [AddComponentMenu("")]
    [System.Serializable]
    public class UDateVariable : BaseVariable<LoGaCulture.LUTE.UDate>
    {
        public override bool SupportsArithmetic(SetOperator setOperator)
        {
            return true;
        }
        public override bool SupportsComparison()
        {
            return false;
        }

        public override bool Evaluate(ComparisonOperator comparisonOperator, UDate value)
        {
            UDate today = System.DateTime.Now;
            var todayDate = today.date.Date;
            var valueDate = Value.date.Date;

            bool condition = false;

            switch (comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    condition = todayDate == valueDate;
                    break;
                case ComparisonOperator.NotEquals:
                    condition = todayDate != valueDate;
                    break;
            }
            return condition;

        }
    }

    /// <summary>
    /// Container for a UDate variable reference or constant value.
    /// </summary>
    [System.Serializable]
    public struct UDateData
    {
        [SerializeField]
        [VariableProperty("<Value>", typeof(UDateVariable))]
        public UDateVariable uDateRef;

        [SerializeField]
        public LoGaCulture.LUTE.UDate uDateVal;

        public static implicit operator LoGaCulture.LUTE.UDate(UDateData UDateData)
        {
            return UDateData.Value;
        }

        public UDateData(LoGaCulture.LUTE.UDate v)
        {
            uDateVal = v;
            uDateRef = null;
        }

        public LoGaCulture.LUTE.UDate Value
        {
            get { return (uDateRef == null) ? uDateVal : uDateRef.Value; }
            set { if (uDateRef == null) { uDateVal = value; } else { uDateRef.Value = value; } }
        }

        public string GetDescription()
        {
            if (uDateRef == null)
            {
                return uDateVal.ToString();
            }
            else
            {
                return uDateRef.Key;
            }
        }
    }
}