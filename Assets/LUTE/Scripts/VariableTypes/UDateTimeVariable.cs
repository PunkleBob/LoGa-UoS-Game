
/*This script has been, partially or completely, generated by the GenerateVariableWindow*/
using System;
using UnityEngine;

namespace LoGaCulture.LUTE
{
    /// <summary>
    /// UDateTime variable type.
    /// </summary>
    [VariableInfo("Date Time", "UDateTime")]
    [AddComponentMenu("")]
    [System.Serializable]
    public class UDateTimeVariable : BaseVariable<UDateTime>
    {
        public override bool SupportsArithmetic(SetOperator setOperator)
        {
            return true;
        }
        public override bool SupportsComparison()
        {
            return false;
        }

        public override bool Evaluate(ComparisonOperator comparisonOperator, UDateTime value)
        {
            DateTime now = DateTime.Now;
            DateTime valueDateTime = value.dateTime;
            TimeSpan tolerance = TimeSpan.FromMilliseconds(500); // Set a tolerance of 1 second (adjust as needed)

            bool condition = false;

            switch (comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    condition = Math.Abs((now - valueDateTime).TotalSeconds) < tolerance.TotalSeconds;
                    break;
                case ComparisonOperator.NotEquals:
                    condition = Math.Abs((now - valueDateTime).TotalSeconds) >= tolerance.TotalSeconds;
                    break;
                case ComparisonOperator.GreaterThan:
                    condition = now > valueDateTime;
                    break;
                case ComparisonOperator.GreaterThanOrEquals:
                    condition = now >= valueDateTime || Math.Abs((now - valueDateTime).TotalSeconds) < tolerance.TotalSeconds;
                    break;
                case ComparisonOperator.LessThan:
                    condition = now < valueDateTime;
                    break;
                case ComparisonOperator.LessThanOrEquals:
                    condition = now <= valueDateTime || Math.Abs((now - valueDateTime).TotalSeconds) < tolerance.TotalSeconds;
                    break;
                default:
                    throw new NotSupportedException($"Unsupported comparison operator: {comparisonOperator}");
            }

            return condition;
        }

    }

    /// <summary>
    /// Container for a UDateTime variable reference or constant value.
    /// </summary>
    [System.Serializable]
    public struct UDateTimeData
    {
        [SerializeField]
        [VariableProperty("<Value>", typeof(UDateTimeVariable))]
        public UDateTimeVariable uDateTimeRef;

        [SerializeField]
        public UDateTime uDateTimeVal;

        public static implicit operator UDateTime(UDateTimeData UDateTimeData)
        {
            return UDateTimeData.Value;
        }

        public UDateTimeData(UDateTime v)
        {
            uDateTimeVal = v;
            uDateTimeRef = null;
        }

        public UDateTime Value
        {
            get { return (uDateTimeRef == null) ? uDateTimeVal : uDateTimeRef.Value; }
            set { if (uDateTimeRef == null) { uDateTimeVal = value; } else { uDateTimeRef.Value = value; } }
        }

        public string GetDescription()
        {
            if (uDateTimeRef == null)
            {
                return uDateTimeVal.ToString();
            }
            else
            {
                return uDateTimeRef.Key;
            }
        }
    }
}