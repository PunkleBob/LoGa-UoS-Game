
/*This script has been, partially or completely, generated by the GenerateVariableWindow*/
using UnityEngine;

namespace LoGaCulture.LUTE
{
    /// <summary>
    /// Season variable type.
    /// </summary>
    [VariableInfo("Date Time", "Season")]
    [AddComponentMenu("")]
    [System.Serializable]
    public class SeasonVariable : BaseVariable<LoGaCulture.LUTE.Season>
    {
        public override bool SupportsArithmetic(SetOperator setOperator)
        {
            return false;
        }
        public override bool SupportsComparison()
        {
            return false;
        }

        public override bool Evaluate(ComparisonOperator comparisonOperator, Season value)
        {
            Season currentSeason = SeasonRanges.GetSeason(System.DateTime.Today);

            switch (comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return Value == currentSeason;
                case ComparisonOperator.NotEquals:
                    return Value != currentSeason;
                default:
                    return false;
            }
        }
    }

    /// <summary>
    /// Container for a Season variable reference or constant value.
    /// </summary>
    [System.Serializable]
    public struct SeasonData
    {
        [SerializeField]
        [VariableProperty("<Value>", typeof(SeasonVariable))]
        public SeasonVariable seasonRef;

        [SerializeField]
        public LoGaCulture.LUTE.Season seasonVal;

        public static implicit operator LoGaCulture.LUTE.Season(SeasonData SeasonData)
        {
            return SeasonData.Value;
        }

        public SeasonData(LoGaCulture.LUTE.Season v)
        {
            seasonVal = v;
            seasonRef = null;
        }

        public LoGaCulture.LUTE.Season Value
        {
            get { return (seasonRef == null) ? seasonVal : seasonRef.Value; }
            set { if (seasonRef == null) { seasonVal = value; } else { seasonRef.Value = value; } }
        }

        public string GetDescription()
        {
            if (seasonRef == null)
            {
                return seasonVal.ToString();
            }
            else
            {
                return seasonRef.Key;
            }
        }
    }
}